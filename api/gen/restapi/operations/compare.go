// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CompareHandlerFunc turns a function with the right signature into a compare handler
type CompareHandlerFunc func(CompareParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CompareHandlerFunc) Handle(params CompareParams) middleware.Responder {
	return fn(params)
}

// CompareHandler interface for that can handle valid compare params
type CompareHandler interface {
	Handle(CompareParams) middleware.Responder
}

// NewCompare creates a new http.Handler for the compare operation
func NewCompare(ctx *middleware.Context, handler CompareHandler) *Compare {
	return &Compare{Context: ctx, Handler: handler}
}

/* Compare swagger:route POST /geocoding_compare compare

Get response from alpha phased geocoding service and compare with production response.

*/
type Compare struct {
	Context *middleware.Context
	Handler CompareHandler
}

func (o *Compare) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCompareParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
