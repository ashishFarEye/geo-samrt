// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"geo-smart/api/gen/models"
)

// GeosmartGoOKCode is the HTTP code returned for type GeosmartGoOK
const GeosmartGoOKCode int = 200

/*GeosmartGoOK Geocode Response

swagger:response geosmartGoOK
*/
type GeosmartGoOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeoSmartResponse `json:"body,omitempty"`
}

// NewGeosmartGoOK creates GeosmartGoOK with default headers values
func NewGeosmartGoOK() *GeosmartGoOK {

	return &GeosmartGoOK{}
}

// WithPayload adds the payload to the geosmart go o k response
func (o *GeosmartGoOK) WithPayload(payload *models.GeoSmartResponse) *GeosmartGoOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the geosmart go o k response
func (o *GeosmartGoOK) SetPayload(payload *models.GeoSmartResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GeosmartGoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GeosmartGoInternalServerErrorCode is the HTTP code returned for type GeosmartGoInternalServerError
const GeosmartGoInternalServerErrorCode int = 500

/*GeosmartGoInternalServerError Error

swagger:response geosmartGoInternalServerError
*/
type GeosmartGoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GeoSmartResponse `json:"body,omitempty"`
}

// NewGeosmartGoInternalServerError creates GeosmartGoInternalServerError with default headers values
func NewGeosmartGoInternalServerError() *GeosmartGoInternalServerError {

	return &GeosmartGoInternalServerError{}
}

// WithPayload adds the payload to the geosmart go internal server error response
func (o *GeosmartGoInternalServerError) WithPayload(payload *models.GeoSmartResponse) *GeosmartGoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the geosmart go internal server error response
func (o *GeosmartGoInternalServerError) SetPayload(payload *models.GeoSmartResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GeosmartGoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GeosmartGoDefault Error

swagger:response geosmartGoDefault
*/
type GeosmartGoDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeoSmartResponse `json:"body,omitempty"`
}

// NewGeosmartGoDefault creates GeosmartGoDefault with default headers values
func NewGeosmartGoDefault(code int) *GeosmartGoDefault {
	if code <= 0 {
		code = 500
	}

	return &GeosmartGoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the geosmart go default response
func (o *GeosmartGoDefault) WithStatusCode(code int) *GeosmartGoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the geosmart go default response
func (o *GeosmartGoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the geosmart go default response
func (o *GeosmartGoDefault) WithPayload(payload *models.GeoSmartResponse) *GeosmartGoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the geosmart go default response
func (o *GeosmartGoDefault) SetPayload(payload *models.GeoSmartResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GeosmartGoDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
