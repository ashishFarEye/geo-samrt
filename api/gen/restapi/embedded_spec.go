// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This project contains APIs for pelias and esmap",
    "title": "GeoSmart",
    "contact": {
      "name": "FarEye",
      "url": "https://www.getfareye.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/geocoding_compare": {
      "post": {
        "description": "Get response from alpha phased geocoding service and compare with production response.",
        "operationId": "compare",
        "parameters": [
          {
            "description": "Input request and response",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoCodingCompare"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/geosmart": {
      "post": {
        "description": "Geosmart",
        "operationId": "geosmart",
        "parameters": [
          {
            "description": "Input Address",
            "name": "geosmart",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoSmart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Geocode Response",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Check Health Of The Application",
        "produces": [
          "text/plain"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK message",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "landmark": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "Fail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GeoAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "GeoCodingCompare": {
      "type": "object",
      "properties": {
        "envCompanyId": {
          "type": "string"
        },
        "request": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Address"
          }
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Success"
          }
        }
      }
    },
    "GeoSmart": {
      "type": "object",
      "properties": {
        "address": {
          "additionalProperties": {
            "$ref": "#/definitions/GeoAddress"
          }
        },
        "partial": {
          "type": "boolean"
        }
      }
    },
    "GeoSmartResponse": {
      "type": "object",
      "properties": {
        "address": {
          "additionalProperties": {
            "$ref": "#/definitions/GeoAddress"
          }
        },
        "fail": {
          "additionalProperties": {
            "$ref": "#/definitions/Fail"
          }
        },
        "success": {
          "additionalProperties": {
            "$ref": "#/definitions/Success"
          }
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "accuracy": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "address_comp": {
          "type": "string"
        },
        "lat": {
          "type": "number",
          "format": "float64"
        },
        "lng": {
          "type": "number",
          "format": "float64"
        },
        "source": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This project contains APIs for pelias and esmap",
    "title": "GeoSmart",
    "contact": {
      "name": "FarEye",
      "url": "https://www.getfareye.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/geocoding_compare": {
      "post": {
        "description": "Get response from alpha phased geocoding service and compare with production response.",
        "operationId": "compare",
        "parameters": [
          {
            "description": "Input request and response",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoCodingCompare"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/geosmart": {
      "post": {
        "description": "Geosmart",
        "operationId": "geosmart",
        "parameters": [
          {
            "description": "Input Address",
            "name": "geosmart",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeoSmart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Geocode Response",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/GeoSmartResponse"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Check Health Of The Application",
        "produces": [
          "text/plain"
        ],
        "operationId": "checkHealth",
        "responses": {
          "200": {
            "description": "OK message",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "landmark": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "pincode": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "Fail": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GeoAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "GeoCodingCompare": {
      "type": "object",
      "properties": {
        "envCompanyId": {
          "type": "string"
        },
        "request": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Address"
          }
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Success"
          }
        }
      }
    },
    "GeoSmart": {
      "type": "object",
      "properties": {
        "address": {
          "additionalProperties": {
            "$ref": "#/definitions/GeoAddress"
          }
        },
        "partial": {
          "type": "boolean"
        }
      }
    },
    "GeoSmartResponse": {
      "type": "object",
      "properties": {
        "address": {
          "additionalProperties": {
            "$ref": "#/definitions/GeoAddress"
          }
        },
        "fail": {
          "additionalProperties": {
            "$ref": "#/definitions/Fail"
          }
        },
        "success": {
          "additionalProperties": {
            "$ref": "#/definitions/Success"
          }
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "accuracy": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "address_comp": {
          "type": "string"
        },
        "lat": {
          "type": "number",
          "format": "float64"
        },
        "lng": {
          "type": "number",
          "format": "float64"
        },
        "source": {
          "type": "string"
        }
      }
    }
  }
}`))
}
